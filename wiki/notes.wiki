==How smooth is smooth enough?==
  I started my survey of a geometry interpolation by examining available solutions. Obviously I tried with spline primitives which exist in virtually any 3d application out there. Quite soon I realized there is something wrong about them. They are not smooth enough. Splines interpolations tend to have flattened periods along a curve. They were design to fit functions with controllable tensions on knots. Fair enough, but not for our purpose. I felt like we need a function which automatically adopts it self for a most smooth solution between as low as 3 or 5 consequence samples.   
 
  After thinking about it a little, I realized what it actually means. I look for an interpolation function which has a constant 2nd derivative, or (de-)accelerates with a constant rate.  Without further considerations I assumed this is a correct premise and started looking for it. I wouldn't be able to prove it, but it doesn't prove anything...
 
  Generally speaking splines are not those, but why do I liked these constant 2nd derivatives based solely on how they might look? At first I supposed because such function is smooth enough to look like an approximation of predictably moving object. But why object is supposed to move predictable, what does it actually mean, and isn't it an unjustified simplification?  

  It took me a while to find a hypothetical explanation of why I feel ok making this assumption. Here it goes:

  If you think about your geometry moving frame by frame as a discretized function, it seems to be bandwidth limited, it was recorded with limited resolution. So called _sampling theorem_ guarantees, that any motion recorded (sampled) by evenly spaced camera shutter will have no "events" happening below Nyquist critical frequency. In other words, movement of an objects animated inside Houdini, and recorded once per frame in ifd/bgeo, *must* have a constant acceleration from frame to frame. In opposite case, there would be changes of underlaying function (our animation) not captured by the samples, what seems to violate a rule of bandwidth limited functions. So assuming Houdini's camera shutter produce one, my assumption seems to be correct.